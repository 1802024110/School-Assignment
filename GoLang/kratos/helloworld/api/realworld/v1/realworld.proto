syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";

option go_package = "kratos-realworld/api/realworld/v1;v1";

// The RealWorld service definition.
service RealWorld {
  // 登录
  rpc Login(LoginRequest) returns (UserReply){
    option (google.api.http) = {
      post: "/api/users/login",
      body: "*"
    };
  }

  // 注册
  rpc Register(RegisterRequest) returns (UserReply){
    option (google.api.http) = {
      post: "/api/users",
      body: "*"
    };
  }

  // 获取当前用户信息
  rpc GetCurrentUser(NullRequest) returns (UserReply){
    option (google.api.http) = {
      get: "/api/users"
    };
  }

  // 更新当前用户信息
  rpc UpdateUser(UpdateRequest) returns (UserReply){
    option (google.api.http) = {
      put: "/api/users",
      body: "*"
    };
  }

  // 获得个人资料
  rpc GetProfile(GetCurrentUserRequest) returns (ProfileReply){
    option (google.api.http) = {
      get: "/api/profiles/{username}"
    };
  }

  // 关注用户
  rpc FollowUser(FollowUserRequest) returns (ProfileReply){
    option (google.api.http) = {
      post: "/api/profiles/{username}/follow",
        body: "*"
    };
  }

  // 取消关注用户
  rpc UnfollowUser(UnfollowUserRequest) returns (ProfileReply){
    option (google.api.http) = {
      delete: "/api/profiles/{username}/follow"
    };
  }

  // 获取文章
  rpc ListArticles(ListArticlesRequest) returns (ArticlesReply){
    option (google.api.http) = {
      get: "/api/articles"
    };
  }

  rpc FeedArticles(FeedArticlesRequest) returns (ArticlesReply){
    option (google.api.http) = {
      get: "/api/articles/feed"
    };
  }

  rpc GetArticle(GetArticleRequest) returns (ArticleReply){
    option (google.api.http) = {
      get: "/api/articles/{slug}"
    };
  }

  rpc CreateArticle(CreateArticleRequest) returns (ArticleReply){
    option (google.api.http) = {
      post: "/api/articles",
      body: "*"
    };
  }

  rpc UpdateArticle(UpdateArticleRequest) returns (ArticleReply){
    option (google.api.http) = {
      put: "/api/articles/{slug}",
      body: "*"
    };
  }

  rpc DeleteArticle(GetArticleRequest) returns (NullReply){
    option (google.api.http) = {
      delete: "/api/articles/{slug}"
    };
  }

  rpc AddComment(AddCommentRequest) returns (CommentReply){
    option (google.api.http) = {
      post: "/api/articles/{slug}/comments",
      body: "*"
    };
  }

  rpc GetComments(GetArticleRequest) returns (CommentsReply){
    option (google.api.http) = {
      get: "/api/articles/{slug}/comments"
    };
  }

  rpc DeleteComment(DeleteCommentRequest) returns (NullReply){
    option (google.api.http) = {
      delete: "/api/articles/{slug}/comments/{id}"
    };
  }

  rpc FavoriteArticle(GetArticleRequest) returns (ArticleReply){
    option (google.api.http) = {
      post: "/api/articles/{slug}/favorite",
        body: "*"
    };
  }

  rpc UnfavoriteArticle(GetArticleRequest) returns (ArticleReply){
    option (google.api.http) = {
      delete: "/api/articles/{slug}/favorite"
    };
  }

  rpc GetTags(NullRequest) returns (TagsReply){
    option (google.api.http) = {
      get: "/api/tags"
    };
  }

}

message NullRequest {}

message NullReply {}

message DeleteCommentRequest {
  string slug = 1;
  uint32 id = 2;
}

message AddCommentRequest {
  message Comment {
    string body = 1;
  }
  Comment comment = 1;
  string slug = 2;
}

message UpdateArticleRequest {

  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }

  Article article = 1;
  string slug = 2;
}

message CreateArticleRequest {

  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }

  Article article = 1;
}

message GetArticleRequest {
  string slug = 1;
}

message FeedArticlesRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  uint32 limit = 4;
  uint32 offset = 5;
}

message UnfollowUserRequest {
  string username = 1;
}

message FollowUserRequest {
  string username = 1;
}

message GetCurrentUserRequest {
  string username = 1;
}

message UpdateRequest {
  UserReply.User user = 1;
}

message LoginRequest {

  message User {
    string email = 1;
    string password = 2;
  }

  User user = 1;
}

message RegisterRequest {

  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }

  User user = 1;
}

message UserReply {

  message User {
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    string image = 5;
  }

  User user = 1;
}

message ProfileReply {

  message Profile {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  Profile profile = 1;
}

message ArticleReply {

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Article {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tagList = 5;
    string createdAt = 6;
    string updatedAt = 7;
    bool favorited = 8;
    uint32 favoritesCount = 9;
    Author author = 10;
  }

  Article article = 1;
}

message ArticlesReply {

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Articles {
    string slug = 1;
    string title = 2;
    string description = 3;
    string body = 4;
    repeated string tagList = 5;
    string createdAt = 6;
    string updatedAt = 7;
    bool favorited = 8;
    uint32 favoritesCount = 9;
    Author author = 10;
  }

  repeated Articles articles = 1;
  uint32 articlesCount = 2;
}

message CommentReply {

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Comment {
    uint32 id = 1;
    string createdAt = 2;
    string updatedAt = 3;
    string body = 4;
    Author author = 5;
  }

  Comment comment = 1;
}

message CommentsReply {

  message Author {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }

  message Comments {
    uint32 id = 1;
    string createdAt = 2;
    string updatedAt = 3;
    string body = 4;
    Author author = 5;
  }

  repeated Comments comments = 1;
}

message TagsReply {
  repeated string tags = 1;
}